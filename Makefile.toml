[env]
BITCOIND_ADDITIONAL_SLEEP_PERIOD = "500"

# ###########################################################
# Override defaults tasks to allow the use of default flows #

# Overridden because: default task should be quick and default task was alias for dev-test-flow.
[tasks.default]
description = "Format, build and run the Rust tests. No clippy nor end-to-end."
workspace = false
dependencies = [
     "format",
     "ts-format",
     "build",
     "test"
]

# Overridden because: added dependencies
[tasks.pre-ci-flow]
workspace = false
dependencies = [
    "start-sccache",
]

# Overridden because: added dependencies
[tasks.pre-build]
workspace = false
dependencies = [
    "check-rs-format",
    "check-ts-format",
    "clippy"
]

# Overridden because: specified dependencies
[tasks.post-test]
workspace = false
dependencies = [
    "api",
]

# Overridden because: added dependencies
[tasks.post-ci-flow]
workspace = false
dependencies = [
    "stop-sccache",
    "clean-registry"
]

# Overridden because: added workspace
[tasks.ci-flow]
workspace = false

# Overridden because: we want --all and workspace = false
[tasks.build]
workspace = false
args = ["build", "--all"]

# Overridden because: we want --all and workspace = false
[tasks.build-verbose]
workspace = false
args = ["build", "--all", "--verbose"]

# Overridden because: we want --all and workspace = false
[tasks.test-verbose]
workspace = false
args = ["test", "--all", "--verbose"]

# Overridden because: add script
[tasks.init]
script = [
'''
git config core.hooksPath .githooks
'''
]

# Overridden because: we want to fail if there are warnings (-D warn)
[tasks.clippy]
workspace = false
args = [
    "clippy",
    "--",
    "-W", "clippy::cast_possible_truncation",
    "-W", "clippy::cast_sign_loss",
    "-W", "clippy::fallible_impl_from",
    "-W", "clippy::cast_precision_loss",
    "-W", "clippy::cast_possible_wrap",
    "-W", "clippy::print_stdout",
    "-W", "clippy::dbg_macro",
    "-D", "warnings"
]

################
# Task aliases #

[tasks.all]
workspace = false
extend = "dev-test-flow"

[tasks.e2e]
workspace = false
extend = "e2e-tests-flow"

[tasks.dry]
workspace = false
extend = "dry-tests-flow"

[tasks.btsieve]
workspace = false
extend = "btsieve-tests-flow"

[tasks.webgui]
workspace = false
extend = "webgui-tests-flow"

[tasks.api]
workspace = false
extend = "api-tests-flow"

[tasks.format]
workspace = false

################
# Custom tasks #

[tasks.check-rs-format]
description = "Runs cargo fmt to check appropriate code format."
workspace = false
install_crate = { crate_name = "rustfmt-nightly", rustup_component_name = "rustfmt-preview", binary = "rustfmt", test_arg = "--help" }
command = "cargo"
args = ["fmt", "--", "--check"]

[tasks.ts-format]
description = "Runs prettier to format TypeScript code."
workspace = false
install_script = ["(cd ./api_tests; yarn install;)"]
script = [
'''
(cd api_tests; yarn run prettier --write '**/*.{ts,json,yml}')
'''
]

[tasks.check-ts-format]
description = "Runs prettier to check appropriate TypeScript code format."
workspace = false
install_script = ["(cd ./api_tests; yarn install;)"]
script = [
'''
(cd api_tests; yarn run prettier --check '**/*.{ts,json,yml}')
'''
]

[tasks.travis]
workspace = false
# Even though we only have 2 cores on Travis, we mostly wait for containers in our tests. Doing that in parallel saves us some time! (8 is just an arbitrary number!)
env = { "RUST_TEST_THREADS" = "8", "RUSTC_WRAPPER" = "${HOME}/.cargo/bin/sccache"  }
run_task = "ci-flow"

[tasks.clean-registry]
# The cargo registry cache grows continuously over time, making our build take longer and longer because it is cached on S3.
# This command removes everything that is older than 30 days, thus keeping only very recent libraries.
description = "Delete old files from the cargo registry cache."
workspace = false
private = true
mac_alias = "clean-registry-mac"
linux_alias = "clean-registry-linux"

[tasks.clean-registry-linux]
condition = { platforms = ["linux"] }
workspace = false
private = true
ignore_errors = true
script = [
'''
find $HOME/.cargo/registry/src $HOME/.cargo/registry/cache \
    -mindepth 2 -type d -ctime 30 -exec rm -rf "{}" \;
'''
]

[tasks.clean-registry-mac]
condition = { platforms = ["mac"] }
workspace = false
private = true
ignore_errors = true
script = [
'''
find $HOME/.cargo/registry/src $HOME/.cargo/registry/cache \
    -depth 2 -type d -mtime +30d -exec rm -rf "{}" \;
'''
]

[tasks.start-sccache]
description = "Setup & start sscache"
workspace = false
private = true
install_script = ["which sccache || (unset RUSTC_WRAPPER; cargo install sccache)"]
# Start sccache with limited cache size to avoid a constantly growing caches (and thus continuously slower builds)
env = { "SCCACHE_CACHE_SIZE" = "400M" }
command = "sccache"
args = ["--start-server"]

[tasks.stop-sccache]
description = "Stop sscache"
workspace = false
private = true
command = "sccache"
args = ["--stop-server"]

#############
# api Tests #
[tasks.pre-api-tests]
description = "Install/build dependencies for api tests"
workspace = false
private = true
script = [ "( cd ./api_tests && yarn install; yarn run gen; )" ]

#####################
# Dry api Test flow #
[tasks.dry-tests-flow]
description = "Defines the dry tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "dry-tests"
]

[tasks.dry-tests]
description = "Runs tests that don't require any external services"
workspace = false
private = true
script = [
'''
./api_tests/node_modules/.bin/ts-node --project ./api_tests/tsconfig.json \
  ./api_tests/harness.ts ./api_tests/dry/*.ts
'''
]

#########################
# WEb GUI api Test flow #
[tasks.webgui-tests-flow]
description = "Defines the web GUI tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "webgui-tests"
]

[tasks.webgui-tests]
description = "Runs tests to ensure that comit_node serves comit-i"
workspace = false
private = true
script = [
'''
./api_tests/node_modules/.bin/ts-node --project ./api_tests/tsconfig.json \
  ./api_tests/harness.ts ./api_tests/webgui/*.ts
'''
]

#################
# E2E Test flow #
[tasks.e2e-tests-flow]
description = "Defines the E2E-tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "e2e-tests",
]

[tasks.e2e-tests]
# Usage: `cargo make e2e <folder>` folder can be:
# - empty (run all tests)
# - btc_eth or btc_eth-erc20 or *erc20
description = "Runs RFC003 end-to-end tests specified on command line. Supports GLOB."
workspace = false
private = true
script_runner = "bash"
script = [
'''
glob="${1:-*}";
for dir in api_tests/e2e/rfc003/$glob; do
    add_test_files=$(ls "$dir/"*.ts 2>/dev/null|| true);
    if test "$add_test_files"; then
        files="$files $add_test_files"
    fi
done;

./api_tests/node_modules/.bin/ts-node --project ./api_tests/tsconfig.json \
  ./api_tests/harness.ts $files;
'''
]

######################################
# btsieve API Test flow #
[tasks.btsieve-tests-flow]
description = "Defines the btsieve API tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "btsieve-tests",
]

[tasks.btsieve-tests]
description = "Runs btsieve API tests."
workspace = false
private = true
script_runner = "bash"
script = [
'''
./api_tests/node_modules/.bin/ts-node --project ./api_tests/tsconfig.json \
  ./api_tests/harness.ts ./api_tests/btsieve/*/*.ts
'''
]

######################################
# all API Tests flow #
[tasks.api-tests-flow]
description = "Defines all API tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "api-tests",
]

[tasks.api-tests]
description = "Runs all API tests."
workspace = false
private = true
script_runner = "bash"
script = [
'''
./api_tests/node_modules/.bin/ts-node --project ./api_tests/tsconfig.json \
  ./api_tests/harness.ts \
    ./api_tests/{dry,webgui,btsieve/*,e2e/*/*}/*.ts
'''
]
